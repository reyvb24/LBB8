ggplot(aes(x = Day, y = Seasonal)) +
geom_col(aes(fill = Seasonal))+
scale_fill_gradient(low = "black", high = "blue") +
labs(title = "Plot of seasonal against day")
train_weekly <- data.frame(train_msts_decomp)
train_weekly %>%
mutate(price_date = train$Close.Last) %>%
mutate(Month  = month(price_date, label = TRUE, abbr = FALSE), Day = wday(price_date)) %>%
group_by(Day, Month) %>%
summarise(Seasonal = sum(Seasonal7 + Seasonal30.44)) %>%
ggplot() +
geom_bar(aes(x = Day, y = Seasonal, fill = Month), stat ="identity",  width = 0.7)+
scale_x_continuous(breaks = seq(10,22,1))
train_weekly %>%
mutate(price_date = train$Close.Last) %>%
mutate(Month  = month(train$price_date, label = TRUE, abbr = FALSE), Day = wday(price_date)) %>%
group_by(Day, Month) %>%
summarise(Seasonal = sum(Seasonal7 + Seasonal30.44)) %>%
ggplot() +
geom_bar(aes(x = Day, y = Seasonal, fill = Month), stat ="identity",  width = 0.7)+
scale_x_continuous(breaks = seq(10,22,1))
model_holt_msts <- HoltWinters(training_msts)
model_holt_msts <- HoltWinters(train_msts)
model_holt_msts <- HoltWinters(train_msts)
model_stlm_ets <- training_msts %>% stlm(method = "ets")
model_stlm_ets <- train_msts %>% stlm(method = "ets")
model_stlm_arima <- train_msts %>% stlm(method = "arima")
holt_forecast <- forecast(model_holt_msts, 13*7)
autoplot(train_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
forecast_ets <- forecast(model_stlm_ets, h = 13*7)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_ets$mean, series = "ets prediction")
forecast_arima <- forecast(model_stlm_arima, h = 13*7)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_arima$mean, series = "Arima prediction")
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val)
val_ts <- ts(data = val$Close.Last)
val_ts
val_ts %>% autoplot()
train_ts %>% autoplot()
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_ts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_ts)
val_ts <- ts(data = val$Close.Last, start = tesla[train_size, ]$price_date, frequency = 7)
val_ts %>% autoplot()
train_ts %>% autoplot()
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_ts)
val_ts <- ts(data = val$Close.Last, start = tesla[train_size-1, ]$price_date, frequency = 7)
train_ts %>% autoplot()
val_ts %>% autoplot()
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_ts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_ts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_ts)
tesla_ts %>% autoplot()
tesla_ts <- ts(data = tesla$Close.Last, start =  start, frequency = 7)
tesla_ts %>% autoplot()
tesla_decomp<- tesla_ts %>% decompose()
tesla_decomp %>% autoplot()
tesla_msts<-tesla$Close.Last %>% msts(seasonal.periods = c(7,365.25/12, 365.25))
tesla_msts_decomp <- tesla_msts %>% mstl()
tesla_msts_decomp %>% autoplot()
train %>%
mutate(Day = wday(price_date), Seasonal = tesla_decomp$seasonal) %>%
distinct(Day, Seasonal) %>%
ggplot(aes(x = Day, y = Seasonal)) +
geom_col(aes(fill = Seasonal))+
scale_fill_gradient(low = "black", high = "blue") +
labs(title = "Plot of seasonal against day")
train %>%
mutate(Day = wday(price_date), Seasonal = tesla_decomp$seasonal) %>%
distinct(Day, Seasonal) %>%
ggplot(aes(x = Day, y = Seasonal)) +
geom_col(aes(fill = Seasonal))+
scale_fill_gradient(low = "black", high = "blue") +
labs(title = "Plot of seasonal against day")
tesla %>%
mutate(Day = wday(price_date), Seasonal = tesla_decomp$seasonal) %>%
distinct(Day, Seasonal) %>%
ggplot(aes(x = Day, y = Seasonal)) +
geom_col(aes(fill = Seasonal))+
scale_fill_gradient(low = "black", high = "blue") +
labs(title = "Plot of seasonal against day")
tesla_weekly <- data.frame(tesla_msts_decomp)
tesla_weekly %>%
mutate(price_date = train$Close.Last) %>%
mutate(Month  = month(tesla$price_date, label = TRUE, abbr = FALSE), Day = wday(price_date)) %>%
group_by(Day, Month) %>%
summarise(Seasonal = sum(Seasonal7 + Seasonal30.44)) %>%
ggplot() +
geom_bar(aes(x = Day, y = Seasonal, fill = Month), stat ="identity",  width = 0.7)+
scale_x_continuous(breaks = seq(10,22,1))
tesla_weekly %>%
mutate(price_date = tesla$Close.Last) %>%
mutate(Month  = month(tesla$price_date, label = TRUE, abbr = FALSE), Day = wday(price_date)) %>%
group_by(Day, Month) %>%
summarise(Seasonal = sum(Seasonal7 + Seasonal30.44)) %>%
ggplot() +
geom_bar(aes(x = Day, y = Seasonal, fill = Month), stat ="identity",  width = 0.7)+
scale_x_continuous(breaks = seq(10,22,1))
tesla_weekly %>%
mutate(price_date = tesla$Close.Last) %>%
mutate(Month  = month(tesla$price_date, label = TRUE, abbr = FALSE), Day = wday(price_date)) %>%
group_by(Day, Month) %>%
summarise(Seasonal = sum(Seasonal7 + Seasonal30.44)) %>%
ggplot() +
geom_bar(aes(x = Day, y = Seasonal, fill = Month), stat ="identity",  width = 0.7)+
scale_x_continuous(breaks = seq(10,22,1)) +
labs(title = "Multi-Seasonality Analysis  - Weekly & Hourly")
tesla_weekly %>%
mutate(price_date = tesla$Close.Last) %>%
mutate(Month  = month(tesla$price_date, label = TRUE, abbr = FALSE), Day = wday(price_date)) %>%
group_by(Day, Month) %>%
summarise(Seasonal = sum(Seasonal7 + Seasonal30.44)) %>%
ggplot() +
geom_bar(aes(x = Day, y = Seasonal, fill = Month), stat ="identity",  width = 0.7)+
scale_x_continuous(breaks = seq(10,22,1)) +
labs(title = "Multi-Seasonality Analysis  - Weekly & Monthly")
val_msts <- tesla_msts %>% tail(7*8)
train_msts <- tesla_msts %>% head(length(train_new) - 7*8)
train_msts <- tesla_msts %>% head(length(tesla) - 7*8)
model_holt_msts <- HoltWinters(train_msts)
model_stlm_ets <- train_msts %>% stlm(method = "ets")
model_stlm_arima <- train_msts %>% stlm(method = "arima")
holt_forecast <- forecast(model_holt_msts, 13*7)
autoplot(train_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
forecast_ets <- forecast(model_stlm_ets, h = 13*7)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_ets$mean, series = "ets prediction")
forecast_arima <- forecast(model_stlm_arima, h = 13*7)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_arima$mean, series = "Arima prediction")
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_msts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_msts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_msts)
summary <- rbind(accuracy_holt, accuracy_ets, accuracy_arima)
rownames(summary) <- c("HoltWinters Accuracy", "ETS Accuracy", "Arima accuracy")
summary
accuracy_data <- data.frame(date = train_new$transaction_date %>% tail(7*8),
actual = as.vector(testing_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$transaction_date %>% tail(7*8),
actual = as.vector(testing_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$transaction_date %>% tail(7*8),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$transaction_date %>% tail(7*8),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
holt_forecast <- forecast(model_holt_msts, 7*8)
autoplot(train_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
forecast_ets <- forecast(model_stlm_ets, h = 7*8)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_ets$mean, series = "ets prediction")
forecast_arima <- forecast(model_stlm_arima, h = 7*8)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_arima$mean, series = "Arima prediction")
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_msts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_msts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_msts)
summary <- rbind(accuracy_holt, accuracy_ets, accuracy_arima)
rownames(summary) <- c("HoltWinters Accuracy", "ETS Accuracy", "Arima accuracy")
summary
accuracy_data <- data.frame(date = tesla$transaction_date %>% tail(7*8),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
train_msts %>% head()
train_msts %>% autoplot()
val_msts %>% autoplot()
model_holt_msts <- HoltWinters(train_msts)
model_stlm_ets <- train_msts %>% stlm(method = "ets")
model_stlm_arima <- train_msts %>% stlm(method = "arima")
holt_forecast <- forecast(model_holt_msts, 7*8)
autoplot(train_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
forecast_ets <- forecast(model_stlm_ets, h = 7*8)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_ets$mean, series = "ets prediction")
forecast_arima <- forecast(model_stlm_arima, h = 7*8)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_arima$mean, series = "Arima prediction")
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_msts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_msts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_msts)
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_msts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_msts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_msts)
summary <- rbind(accuracy_holt, accuracy_ets, accuracy_arima)
rownames(summary) <- c("HoltWinters Accuracy", "ETS Accuracy", "Arima accuracy")
summary
accuracy_data <- data.frame(date = tesla$transaction_date %>% tail(7*8),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data %>%
ggplot() +
geom_line(aes(x = date, y = actual, colour = "Actual"),size=0.5)+
geom_line(aes(x = date, y = holt, colour = "Holt Winter Model"),size=0.3)+
geom_line(aes(x = date, y = arima, colour = "Arima Model (Best Model)"),size=0.5)+
geom_line(aes(x = date, y = ets, colour = "ETS Model"), size = 0.3) +
labs(title = "Hourly Visitors - Actual Vs All Models",x = "Date",y = "Visitor",colour = "")
accuracy_data <- data.frame(date = tesla$price_date %>% tail(7*8),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data %>%
ggplot() +
geom_line(aes(x = date, y = actual, colour = "Actual"),size=0.5)+
geom_line(aes(x = date, y = holt, colour = "Holt Winter Model"),size=0.3)+
geom_line(aes(x = date, y = arima, colour = "Arima Model (Best Model)"),size=0.5)+
geom_line(aes(x = date, y = ets, colour = "ETS Model"), size = 0.3) +
labs(title = "Hourly Visitors - Actual Vs All Models",x = "Date",y = "Visitor",colour = "")
val_msts <- tesla_msts %>% tail(7*24)
train_msts <- tesla_msts %>% head(length(tesla) - 7*24)
train_msts %>% autoplot()
val_msts %>% autoplot()
model_holt_msts <- HoltWinters(train_msts)
model_stlm_ets <- train_msts %>% stlm(method = "ets")
model_stlm_arima <- train_msts %>% stlm(method = "arima")
holt_forecast <- forecast(model_holt_msts, 7*24)
autoplot(train_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
forecast_ets <- forecast(model_stlm_ets, h = 7*24)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_ets$mean, series = "ets prediction")
forecast_arima <- forecast(model_stlm_arima, h = 7*24)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_arima$mean, series = "Arima prediction")
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_msts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_msts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_msts)
summary <- rbind(accuracy_holt, accuracy_ets, accuracy_arima)
rownames(summary) <- c("HoltWinters Accuracy", "ETS Accuracy", "Arima accuracy")
summary
accuracy_data <- data.frame(date = tesla$price_date %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data %>%
ggplot() +
geom_line(aes(x = date, y = actual, colour = "Actual"),size=0.5)+
geom_line(aes(x = date, y = holt, colour = "Holt Winter Model"),size=0.3)+
geom_line(aes(x = date, y = arima, colour = "Arima Model (Best Model)"),size=0.5)+
geom_line(aes(x = date, y = ets, colour = "ETS Model"), size = 0.3) +
labs(title = "Hourly Visitors - Actual Vs All Models",x = "Date",y = "Visitor",colour = "")
accuracy_data %>%
ggplot() +
geom_line(aes(x = date, y = actual, colour = "Actual"),size=0.5)+
geom_line(aes(x = date, y = holt, colour = "Holt Winter Model (Best Model)"),size=0.3)+
geom_line(aes(x = date, y = arima, colour = "Arima Model"),size=0.5)+
geom_line(aes(x = date, y = ets, colour = "ETS Model"), size = 0.3) +
labs(title = "Hourly Visitors - Actual Vs All Models",x = "Date",y = "Visitor",colour = "")
model_arima_test <- stlm(train_msts, method = "arima")
arima_forecast_test <- forecast(model_arima_test, 7*24)
test$visitor <- round(arima_forecast_test$mean)
model_holt_test <- HoltWinters(tesla_msts)
test <- read.csv(test.csv)
test <- read.csv("data_input/test.csv")
test[, c( "Close.Last", "Open", "High", "Low")] <- lapply(tesla[, c( "Close.Last", "Open", "High", "Low")], function(y) as.numeric(gsub("[$]", "", y)))
test %>% head()
tesla <- tesla %>%
mutate(price_date = as.Date(price_date, tz = "", format("%m / %d / %Y"))) %>%
filter(price_date>end)
test <- test %>% rename(price_date = Date)
test <- test %>%
mutate(price_date = as.Date(price_date, tz = "", format("%m / %d / %Y"))) %>%
filter(price_date>end)
test %>% head()
test <- read.csv("data_input/test.csv")
test[, c( "Close.Last", "Open", "High", "Low")] <- lapply(tesla[, c( "Close.Last", "Open", "High", "Low")], function(y) as.numeric(gsub("[$]", "", y)))
test %>% head()
test <- read.csv("data_input/test.csv")
test[, c( "Close.Last", "Open", "High", "Low")] <- lapply(tesla[, c( "Close.Last", "Open", "High", "Low")], function(y) as.numeric(gsub("[$]", "", y)))
test %>% head()
test <- read.csv("data_input/test.csv")
test %>% head()
test <- test %>% rename(price_date = Date)
test %>%
mutate(price_date = as.Date(price_date, tz = "", format("%m / %d / %Y"))) %>%
filter(price_date>end)
test %>%
mutate(price_date = as.Date(price_date, tz = "", format("%Y - %m - %d"))) %>%
filter(price_date>end)
test <- test %>% rename(price_date = Date)
test <- test %>%
mutate(price_date = as.Date(price_date, tz = "", format("%Y - %m - %d"))) %>%
filter(price_date>end)
test %>% head()
holt_forecast_test <- forecast(model_arima_test, max(test$price_date)-end)
test_ts <- ts(test, start = head(test$price_date), frequency = 7)
test_accuracy <- forecast::accuracy(holt_forecast$mean, test_ts)
test_ts <- ts(test, start = head(test$price_date)-1, frequency = 7)
head(test$price_date)-1
test <- test %>% fill()
test <- read.csv("data_input/test.csv")
test %>% head()
test <- test %>% rename(price_date = Date)
test <- test %>%
mutate(price_date = as.Date(price_date, tz = "", format("%Y - %m - %d"))) %>%
filter(price_date>=end)
test %>% head()
test <- test %>% fill()
test_ts <- ts(test, start = head(test$price_date)-1, frequency = 7)
holt_forecast_test <- forecast(model_arima_test, max(test$price_date)-end)
test_accuracy <- forecast::accuracy(holt_forecast$mean, test_ts)
test_ts <- ts(test, start = start, frequency = 7)
test_accuracy <- forecast::accuracy(holt_forecast$mean, test_ts)
holt_forecast_test <- forecast(model_arima_test, max(test$price_date)-end)
test_accuracy <- forecast::accuracy(holt_forecast$mean, test_ts)
max(test$price_date)-end
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
test_ts <- ts(test, start = start, frequency = 7)
holt_forecast_test <- forecast(model_holt_test, max(test$price_date)-end)
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
holt_forecast_test$mean
model_holt_test <- HoltWinters(tesla_msts)
holt_forecast_test <- forecast(model_holt_test, 43)
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
test %>% autoplot()
test_ts %>% autoplot()
test_ts <- ts(test$Close, start = start, frequency = 7)
test_ts %>% autoplot()
holt_forecast_test <- forecast(model_holt_test, max(test$price_date)-end)
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
test_ts <- ts(test$Close, start = end, frequency = 7)
test_ts %>% autoplot()
holt_forecast_test <- forecast(model_holt_test, max(test$price_date)-end)
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
model_holt_test <- HoltWinters(tesla_msts)
holt_forecast_test <- forecast(model_holt_test, max(test$price_date)-end)
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
test_msts <- test %>% msts(seasonal.periods = c(7,365.25/12, 365.25))
test_msts %>% autoplot()
test_msts <- test$Close %>% msts(seasonal.periods = c(7,365.25/12, 365.25))
test_msts %>% autoplot()
model_holt_test <- HoltWinters(tesla_msts)
holt_forecast_test <- forecast(model_holt_test, max(test$price_date)-end)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
test_accuracy <- forecast::accuracy(holt_forecast_test$mean, test_ts)
holt_forecast_test <- forecast(model_holt_test, max(test$price_date)-end)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
model_holt_test <- HoltWinters(tesla_msts)
holt_forecast_test <- forecast(model_holt_test, 43)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
holt_forecast_test <- forecast(model_holt_test, 7)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
test
holt_forecast_test <- forecast(model_holt_test, tesla$price_date %>% tail()-end)
holt_forecast_test <- forecast(model_holt_test, (tesla$price_date %>% tail())-end)
holt_forecast_test <- forecast(model_holt_test, (tesla %>% tail["price_date",])-end)
ending <- max(test$price_date)
ending
test <- test %>% fill()
ending <- max(test$price_date)
ending
test
ending - end
end
test$price_date %>% head(1)
holt_forecast_test <- forecast(model_holt_test, ending-end)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
test_msts <- test$Close %>% ts(start = start, frequency = 7)
test_msts %>% autoplot()
holt_forecast_test <- forecast(model_holt_test, ending-end)
holt_forecast_test <- forecast(model_holt_test, ending-end)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
test_msts <- test$Close %>% ts(start = end, frequency = 7)
test_msts %>% autoplot()
holt_forecast_test <- forecast(model_holt_test, ending-end)
autoplot(test_msts, series = "Actual") +
autolayer(holt_forecast_test$mean, series = "ets prediction")
acf(holt_modeltresiduals)
acf(holt_model$tresiduals)
acf(model_holt_msts$tresiduals)
Box.test(model_holt_msts$residuals, type = "Ljung-Box")
Box.test(model_stlm_arima$residuals, type = "Ljung-Box")
model_holt_msts <- HoltWinters(train_msts)
model_stlm_ets <- train_msts %>% stlm(method = "ets")
model_stlm_arima <- train_msts %>% stlm(method = "arima")
holt_forecast <- forecast(model_holt_msts, 7*24)
autoplot(train_msts, series = "Actual") +
autolayer(holt_forecast$mean, series = "ets prediction")
forecast_ets <- forecast(model_stlm_ets, h = 7*24)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_ets$mean, series = "ets prediction")
forecast_arima <- forecast(model_stlm_arima, h = 7*24)
autoplot(train_msts, series = "Actual") +
autolayer(forecast_arima$mean, series = "Arima prediction")
View(holt_forecast)
accuracy_holt <- forecast::accuracy(holt_forecast$mean, val_msts)
accuracy_ets <- forecast::accuracy(forecast_ets$mean, val_msts)
accuracy_arima <- forecast::accuracy(forecast_arima$mean, val_msts)
summary <- rbind(accuracy_holt, accuracy_ets, accuracy_arima)
rownames(summary) <- c("HoltWinters Accuracy", "ETS Accuracy", "Arima accuracy")
summary
accuracy_data <- data.frame(date = tesla$price_date %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$price_date %>% tail(0),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$price_date %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$msts %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla_msts$price_date %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data <- data.frame(date = tesla$price_date %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", out.width = "80%")
options(scipen = 99)
library(tidyverse)
library(lubridate)
library(forecast)
library(TTR)
library(fpp)
library(tseries)
library(TSstudio)
library(padr)
library(imputeTS)
#read data into train and test variables respectively
tesla <- read.csv("data_input/tesla.csv")
glimpse(tesla)
library(stringr)
tesla[, c( "Close.Last", "Open", "High", "Low")] <- lapply(tesla[, c( "Close.Last", "Open", "High", "Low")], function(y) as.numeric(gsub("[$]", "", y)))
tesla %>% head()
tesla <- tesla %>% rename(price_date = Date)
tesla <- tesla %>%
mutate(price_date = as.Date(price_date, tz = "", format("%m / %d / %Y")))
tesla %>% head()
colSums(is.na(tesla))
range(tesla$price_date)
tesla <- tesla %>% pad(interval = "day")
tesla %>% head()
ggplot_na_distribution(tesla$Close.Last)
tesla <- tesla %>% fill(-price_date)
ggplot_na_distribution(tesla$Close.Last)
tesla %>% head()
start <- min(tesla$price_date)
start
end <- max(tesla$price_date)
end
train_new %>%
mutate(transaction_date = format(transaction_date, "%H:%M")) %>%
group_by(transaction_date) %>%
summarise(avg.visitors = mean(visitor)) %>%
ggplot(aes(transaction_date, avg.visitors)) +
geom_col(aes(fill = avg.visitors)) +
labs(title = "Average visitors per hour")
accuracy_data <- data.frame(date = tesla$price_date %>% tail(7*24),
actual = as.vector(val_msts) ,
holt = as.vector(holt_forecast$mean) ,
ets = as.vector(forecast_ets$mean),
arima = as.vector(forecast_arima$mean))
accuracy_data %>%
ggplot() +
geom_line(aes(x = date, y = actual, colour = "Actual"),size=0.5)+
geom_line(aes(x = date, y = holt, colour = "Holt Winter Model (Best Model)"),size=0.3)+
geom_line(aes(x = date, y = arima, colour = "Arima Model"),size=0.5)+
geom_line(aes(x = date, y = ets, colour = "ETS Model"), size = 0.3) +
labs(title = "Hourly Visitors - Actual Vs All Models",x = "Date",y = "Visitor",colour = "")
acf(model_holt_msts$tresiduals)
model_holt_msts$
acf(model_holt_msts$seasonal)
acf(model_holt_msts$seasonal)
acf(residuals(model_holt_msts))
shapiro.test(x = residuals(model_holt_msts))
knitr::include_graphics("assets/stock.jpg")
